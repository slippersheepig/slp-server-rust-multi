name: build-and-push-multiarch

on:
  workflow_dispatch:
    inputs:
      slp_commit:
        description: 'Upstream commit SHA to build (default: master)'
        required: false
        type: string
  workflow_call:
    inputs:
      slp_commit:
        required: false
        type: string

permissions:
  contents: read
  packages: write

env:
  DOCKERHUB_IMAGE: sheepgreen/slp-server-rust

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: amd64
            platform: linux/amd64
            target_triple: x86_64-unknown-linux-musl
            rust_musl_image: ghcr.io/rust-cross/rust-musl-cross:x86_64-musl
            suffix: amd64
          - name: arm64
            platform: linux/arm64
            target_triple: aarch64-unknown-linux-musl
            rust_musl_image: ghcr.io/rust-cross/rust-musl-cross:aarch64-musl
            suffix: arm64
          - name: armv7
            platform: linux/arm/v7
            target_triple: armv7-unknown-linux-musleabi
            rust_musl_image: ghcr.io/rust-cross/rust-musl-cross:armv7-musleabi
            suffix: armv7

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set derived env
        shell: bash
        run: |
          set -eux
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV
          echo "GHCR_IMAGE=ghcr.io/${OWNER_LC}/slp-server-rust" >> $GITHUB_ENV
          if [ -n "${{ inputs.slp_commit || '' }}" ]; then
            echo "UPSTREAM_SHA=${{ inputs.slp_commit }}" >> $GITHUB_ENV
          fi
          if [ -n "${UPSTREAM_SHA:-}" ]; then
            SRC_URL="https://github.com/spacemeowx2/slp-server-rust/archive/${UPSTREAM_SHA}.tar.gz"
          else
            SRC_URL="https://github.com/spacemeowx2/slp-server-rust/archive/refs/heads/master.tar.gz"
          fi
          echo "SRC_ARCHIVE_URL=$SRC_URL" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push for ${{ matrix.name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          provenance: false
          build-args: |
            RUST_MUSL_IMAGE=${{ matrix.rust_musl_image }}
            TARGET_TRIPLE=${{ matrix.target_triple }}
            SRC_ARCHIVE_URL=${{ env.SRC_ARCHIVE_URL }}
          tags: |
            docker.io/${{ env.DOCKERHUB_IMAGE }}:${{ matrix.suffix }}
            ${{ env.GHCR_IMAGE }}:${{ matrix.suffix }}

  manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create & push multi-arch manifests (Docker Hub)
        shell: bash
        run: |
          set -eux
          BASE="docker.io/${{ env.DOCKERHUB_IMAGE }}"
          docker buildx imagetools create --tag "${BASE}:latest" \
            "${BASE}:amd64" "${BASE}:arm64" "${BASE}:armv7"
          docker buildx imagetools inspect "${BASE}:latest" --raw

      - name: Create & push multi-arch manifests (GHCR)
        shell: bash
        run: |
          set -eux
          BASE="${{ env.GHCR_IMAGE }}"
          docker buildx imagetools create --tag "${BASE}:latest" \
            "${BASE}:amd64" "${BASE}:arm64" "${BASE}:armv7"
          docker buildx imagetools inspect "${BASE}:latest" --raw
